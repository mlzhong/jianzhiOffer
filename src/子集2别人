import java.util.*;

class Solution {
    List<List<Integer>> res=new ArrayList<>();
    Stack<Integer> stack=new Stack<Integer>();
    HashSet<Integer> set=new HashSet<Integer>();
    public static void main(String[]args){
        Solution ss=new Solution();
        int []nums={1,2,2};
        System.out.println(ss.subsetsWithDup(nums));

    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {

        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) return res;
        Arrays.sort(nums);
        backtrack(0, nums, res, new ArrayList<>());
        return res;


    }

    public void backtrack(int idx, int[] nums, List<List<Integer>> res, List<Integer> tmp_list) {
        res.add(new ArrayList<>(tmp_list));
        for (int i = idx; i < nums.length; i++) {
            if (i > idx && nums[i - 1] == nums[i]){
                continue;
            }
            tmp_list.add(nums[i]);
            backtrack(i + 1, nums, res, tmp_list);
            tmp_list.remove(tmp_list.size() - 1);
        }
    }



}
