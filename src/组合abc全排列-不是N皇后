import java.util.ArrayList;
import java.util.TreeSet;

class Solution {
    public ArrayList<String> Permutation(String str) {
        ArrayList<String> res=new ArrayList<String>();
        if(str==null){
            return res;
        }

        char[] chars=str.toCharArray();
        int len=str.length();
        TreeSet<String> treeres=new TreeSet<String>();
        quanpailie(chars,0,len-1,treeres);
        res.addAll(treeres);
        return res;


    }
    public void quanpailie(char[] chars,int start,int end,TreeSet<String> set){
        if(start==end){
            //set.add(chars.toString());
            set.add(String.valueOf(chars));
            return;
        }
        for(int i=start;i<=end;i++){
            swap(chars,start,i);
            quanpailie(chars,start+1,end,set);
            swap(chars,start,i);
        }
    }
    public void swap(char[] chars,int a,int b){
        if(a==b){//因为会出现原位置与原位置交换，直接空即可

        }else{
            char temp = chars[a];
            chars[a]=chars[b];
            chars[b]=temp;
        }
    }

}

