import java.util.*;

class Solution {
    ArrayList<List<Integer>> res=new ArrayList<>();
    public static void main(String[]args){
        Solution ss=new Solution();
        int []nums={1,1,1,3};
        System.out.println(ss.permuteUnique(nums));
    }
    public List<List<Integer>> permuteUnique(int[] nums) {
        HashSet<Integer> set=new HashSet<Integer>();//用过的元素放这里
        Stack<Integer> stack=new Stack<Integer>();//结果一条root到叶子的path放这里
        Arrays.sort(nums);
        dfs(nums,stack,set);
        return res;
    }
    private void dfs(int[] nums,Stack<Integer> stack,HashSet<Integer> set){
        if(stack.size()==nums.length){
            res.add(new ArrayList<>(stack));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(!set.contains(i)){ //set记录下标index
                //和之前的数相等，并且之前的数还未使用过，只有出现这种情况，才会出现相同分支，剪枝
                if (i > 0 && nums[i] == nums[i - 1] && !set.contains(i-1)) {
                    continue;
                }

                set.add(i);
                stack.push(nums[i]);

                dfs(nums, stack, set);
                //恢复现场
                // 刚开始接触回溯算法的时候常常会忽略状态重置
                // 回溯的时候，一定要记得状态重置
                set.remove(i);
                stack.pop();
            }
        }
    }


}
