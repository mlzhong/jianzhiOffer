import java.util.*;

class Solution {
    List<List<Integer>> res=new ArrayList<>();
    Stack<Integer> stack=new Stack<>();
    HashSet<Integer> set=new HashSet<>();
    public static void main(String[]args){
        Solution ss=new Solution();
        int []nums={2,3,6,7};
        System.out.println(ss.combinationSum(nums,7));

    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if(target==0 || candidates.length==0){
            return res;
        }
        Arrays.sort(candidates);
        dfs(candidates,target,0,0);
        return res;

    }
    private void dfs(int[] candidates,int target,int sum, int start){ //控制层数的参数sum（达到叶子的条件）
        if(sum>=target){
            if(sum==target){
                res.add(new ArrayList<>(stack));
            }
            return;
        }
        for(int i=start;i<candidates.length && sum<target;i++){
            stack.add(candidates[i]);
            sum+=candidates[i];
            dfs(candidates,target,sum,i);// 因为candi数组传递的元素可以重复使用，故传参是i而不是i+1
            stack.pop();
            sum-=candidates[i];

        }

    }


}
